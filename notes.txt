1. whip up threads.
    tinker;
    $threads = factory(App\Thread::class, 50)->create();

2. whip up replies for threads.
    tinker;
    $threads->each(function($thread){
        factory(App\Reply::class,10)->create([
            'thread_id' => $thread->id,
        ]);
    });

3. setup phpunit config file
    ./phpunit.xml
    <php>
        :
        <env name="DB_CONNECTION" value="sqlite"/>
        <env name="DB_DATABASE" value=":memory:"/>
        :
    </php>

4. add _ide_helper.php raw file

5. Test Levels Conceptions(in Laravel specific)
    * <Feature Test> from outside in ( High level test )
        Browser point of view / User point of view
    * <Unit Test / Integration Test Level> ( Low level test )

6. Obj has certain obj(s) -- $this->assertInstanceOf(Collection/Obj,relations);
    public function a_thread_has_replies()
    {
        $thread = factory('App\Thread')->create();
        $this->assertInstanceOf(Collection::class, $thread->replies);
    }

7. laravel ignore exception when doing test.
    enable: tweak render@app\Exceptions\Handler.php
    if(app()->environment() === 'testing') throw $exception;
    // throw exception directly when working under testing env rather render them.

8. testing expected exception
    /** @test **/
    public function unauthenticated_users_may_not_add_replies()
    {
        $this->expectException('Illuminate\Auth\AuthenticationException');
        $this->post('/threads/1/replies', []);
    }
9. factory stuffs
        factory('App\User')->raw();     // whip up an array of User in memory
        factory('App\User')->make();    // whip up an instance of User in memory
        factory('App\User')->create();  // whip up an instance of User and persist in database

10. TestCase basis
    'Feature Test':     auth/user/process/behavior/validation (controller related test);
    'Unit Test':        eloquent/model related test(relationships, methods, properties)

11. Exception withHandling/withoutHandling solution and remove No.7 treatment
    https://gist.github.com/adamwathan/125847c7e3f16b88fa33a9f8b42333da

12. To simulate a post appropriately
        // the issue is we used to do create rather than make which is not correct.
        // to simulate a post, we should prepare the data, use `make` is more appropriate.
        // $thread = create('App\Thread');
        // but the thing is if we 'make' the thread, we will no longer grab $thread->id,
        // cuz it is not been persisted. to solve that we need simulate the post first
        // and grab the id from the header in the response of the post.

        $thread = make('App\Thread');
        $response = $this->post('/threads', $thread->toArray());
        $path = $response->headers->get('Location');
        $this->get($path)
            ->assertSee($thread->title)
            ->assertSee($thread->body);

13. Testing request validation

    /** @test **/
    public function a_thread_requires_a_body()
    {
        $this->publishThread(['body' => null])
            ->assertSessionHasErrors('body');

    }

    public function publishThread($overrides = [])
    {
        $this->withExceptionHandling()
            ->signIn();

        $thread = make('App\Thread',$overrides);

        return $this->post('/threads', $thread->toArray());
    }

14. Configuration for PHPStorm/PHPUnit testing workflow.

    1. Menu->Run->Edit Configuration
        Default->PHPUnit
            1. Test Scope: Directory
            2. Directory: /Users/andy/Codebase/tdd/tests
            3. (tick) Use alternative configuration file: /Users/andy/Codebase/tdd/phpunit.xml
    2. Preferences => Languages & Frameworks => PHP
        1. Specify PHP Language Level: 7.1
        2. Specify CLI Interpreter: PHP 7.1.3
    3. Preferences => Languages & Frameworks => PHP => Test Frameworks
        1. Use PHPUnit config for Local (add one if not exist)
        2. (tick) Use Composer autoloader
        3. Path to script: /Users/andy/Codebase/tdd/vendor/autoload.php
    4. Shortcuts
        Command + t             => Run context configuration
        Command + Shift + t     => Run (re-run the previous test)
        Command + Shift + w     => Close the popup testing window
15. multiple route can share same method@Controller
    Route::get('/threads', 'ThreadsController@index');
    Route::get('/threads/{channel}', 'ThreadsController@index');

16. if you want to fetch an eloquent model by some column rather than default key(id)

    // overwrite the getRouteKeyName() method of Eloquent Model
    class Channel extends Eloquent{
        // return primaryKey by default
        public function getRouteKeyName()
        {
            //         return $this->primaryKey; by default;
            return 'slug'; // TODO: Change the autogenerated stub
        }
    }
