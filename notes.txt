1. wipe up threads.
    tinker;
    $threads = factory(App\Thread::class, 50)->create();

2. wipe up replies for threads.
    tinker;
    $threads->each(function($thread){
        factory(App\Reply::class,10)->create([
            'thread_id' => $thread->id,
        ]);
    });

3. setup phpunit config file
./phpunit.xml
<php>
    :
    <env name="DB_CONNECTION" value="sqlite"/>
    <env name="DB_DATABASE" value=":memory:"/>
    :
</php>

4. add _ide_helper.php raw file

5. Test Levels Conceptions(in Laravel specific)
    * <Feature Test> from outside in ( High level test )
        Browser point of view / User point of view
    * <Unit Test / Integration Test Level> ( Low level test )

6. Obj has certain obj(s) -- $this->assertInstanceOf(Collection/Obj,relations);
    public function a_thread_has_replies()
    {
        $thread = factory('App\Thread')->create();
        $this->assertInstanceOf(Collection::class, $thread->replies);
    }

7. laravel ignore exception when doing test.
    enable: tweak render@app\Exceptions\Handler.php
    if(app()->environment() === 'testing') throw $exception;
    // throw exception directly when working under testing env rather render them.

8. testing expected exception
    /** @test **/
    public function unauthenticated_users_may_not_add_replies()
    {
        $this->expectException('Illuminate\Auth\AuthenticationException');
        $this->post('/threads/1/replies', []);
    }
9. factory stuffs
        factory('App\User')->raw();     // whip up an array of User in memory
        factory('App\User')->make();    // whip up an instance of User in memory
        factory('App\User')->create();  // whip up an instance of User and persist in database

10. TestCase basis
    'Feature Test':     auth/user/process/behavior (controller related test);
    'Unit Test':        eloquent/model related test(relationships, methods, properties)
